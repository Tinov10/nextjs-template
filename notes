1 Engine Locking

- which version of node are we using
- create .nvmrc
  - lts/fermium = node 14
- create .npmrc
  - engine-strict=true
- specify enigines inside package.json
  "engines": {
  "node": ">=14.0.0",
  "yarn": ">=1.22.0",
  "npm": "please-use-yarn"
  },

Git Setup

- create remote repo
- create access token

ESLint

- pre configured
- add more config

Prettier

- yarn add -D prettier
- add .prettierignore file
- add .prettierrc file = config
- add script

Git Hooks (Husky)

- script that runs on different stages of the git process to enforce code quality standards

1. git add .
2. git commit -m 'xxx'
3. git push

- yarn add -D husky
- npx husky install = creates .husky
- npx husky add .husky/pre-commit "yarn lint"
- npx husky add .husky/pre-push "yarn build"
- add prepare script "husky install"

Linter

- add linter to ensure commit messages are consistent
- yarn add -D @commitlint/cli @commitlint/config-conventional
- add commitlint.config.js file
- enable the linter with husky
- npx husky add .husky/commit-msg 'npx --no -- commitlint --edit "$1"'

VS Code Config

- create folder .vscode with file settings.json
  = project specific settings that overwrite the general
- the file is also commited to github inside repo

Debugger

- add file launch.json inside the .vscode folder

Environment variables

- yarn add -D cross-env
- set environment variables on the command line
- inside package.json add new dev script
- "dev:inspect": "cross-env NODE_OPTIONS='--inspect' next dev"
- so we can inspect server side logs in the browser when we are in dev mode
- go to chrome inspect chrome://inspect

Directory Structure
Storybook
Creating a component template
Using the component template
Layouts
Deployment
